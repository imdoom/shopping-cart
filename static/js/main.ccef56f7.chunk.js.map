{"version":3,"sources":["components/ShoppingCart.js","components/Product.js","components/Firebase.js","App.js","serviceWorker.js","index.js"],"names":["ShoppingCart","shopCartState","productState","RemoveProduct","product","index","cartProducts","findIndex","i","sku","newProducts","splice","setCartProducts","active","cartOpen","Background","Card","Head","Title","xmlns","width","height","viewBox","onClick","setCartOpen","className","d","fill","Body","map","Item","key","Group","size","narrow","Container","src","title","subtitle","description","quantity","price","newProd","Products","IncreaseQuantitiy","DecreaseQuantitiy","Foot","total","forEach","item","CalTotal","fullwidth","color","Product","inventory","addProduct","useState","sizeError","setSizeError","selectedSize","setSelectedSize","textAlign","align","badge","badgeColor","Object","keys","length","filter","s","uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","ref","App","data","setData","setInventory","sizes","setSizes","user","setUser","setLoading","products","values","shownProducts","arr","find","push","p","sizeFilter","useEffect","a","async","fetch","response","json","fetchProducts","onAuthStateChanged","handleData","snap","val","on","error","alert","off","sizeSelection","indexOf","Welcome","Header","displayName","primary","signOut","SignIn","firebaseAuth","id","rounded","includes","paddingless","marginless","Fragment","multiline","centered","gapSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccef56f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Image, Button, Title, Column, List } from \"rbx\";\r\nimport \"../css/App.css\";\r\n\r\nconst ShoppingCart = ({shopCartState, productState}) => {\r\n    const CalTotal = () => {\r\n        var total = 0;\r\n        productState.cartProducts.forEach((item) => total = total + item.quantity*item.price);\r\n        return total;\r\n    }\r\n    const RemoveProduct = product => {\r\n        const index = productState.cartProducts.findIndex(i => i.sku === product.sku);\r\n        const newProducts = [...productState.cartProducts, ];\r\n        newProducts.splice(index, 1);\r\n        productState.setCartProducts(newProducts);\r\n    }\r\n    const IncreaseQuantitiy = product => {\r\n        const index = productState.cartProducts.findIndex(i => i.sku === product.sku);\r\n        var newProd = null;\r\n        const Products = [...productState.cartProducts, ];\r\n        if(index>-1){\r\n            newProd = {...Products[index], quantity: Products[index].quantity + 1};\r\n            Products.splice(index, 1, newProd);\r\n        }\r\n        productState.setCartProducts(Products);\r\n    }\r\n    const DecreaseQuantitiy = product => {\r\n        const index = productState.cartProducts.findIndex(i => i.sku === product.sku);\r\n        var newProd = null;\r\n        const Products = [...productState.cartProducts, ];\r\n        if(index>-1 && (Products[index].quantity-1 > 0)){\r\n            newProd = {...Products[index], quantity: Products[index].quantity - 1};\r\n            Products.splice(index, 1, newProd);\r\n            productState.setCartProducts(Products);\r\n        }\r\n        else{\r\n            RemoveProduct(product);\r\n        }\r\n\r\n    }\r\n    return(\r\n        <Modal active={shopCartState.cartOpen}>\r\n        <Modal.Background/>\r\n        <Modal.Card>\r\n            <Modal.Card.Head>\r\n            <Modal.Card.Title><Title>Shopping Cart</Title></Modal.Card.Title>\r\n            {/* <Button onClick={() => shopCartState.setCartOpen(!shopCartState.cartOpen)} id=\"sword-cross\" size =\"large\"><i className=\"material-icons\">cancel</i></Button> */}\r\n            <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                width=\"40px\" \r\n                height=\"40px\" \r\n                viewBox=\"0 0 24 24\" \r\n                onClick={() => shopCartState.setCartOpen(!shopCartState.cartOpen)}\r\n                className=\"svgIcon\"\r\n            >\r\n                <path d=\"M6.2 2.44l11.9 11.9l2.12-2.12l1.41 1.41l-2.47 2.47l3.18 3.18c.39.39.39 1.02 0 1.41l-.71.71a.996.996 0 0 1-1.41 0L17 18.23l-2.44 2.47l-1.41-1.41l2.12-2.12l-11.9-11.9V2.44H6.2M15.89 10l4.74-4.74V2.44H17.8l-4.74 4.74L15.89 10m-4.95 5l-2.83-2.87l-2.21 2.21l-2.12-2.12l-1.41 1.41l2.47 2.47l-3.18 3.19a.996.996 0 0 0 0 1.41l.71.71c.39.39 1.02.39 1.41 0L7 18.23l2.44 2.47l1.41-1.41l-2.12-2.12L10.94 15z\" fill=\"currentColor\"/>\r\n            </svg>\r\n            </Modal.Card.Head>\r\n            <Modal.Card.Body>\r\n            <List>\r\n                {productState.cartProducts.map((product) => {    \r\n                    return(\r\n                            <List.Item key={product.sku}>\r\n                                <Column.Group>\r\n                                    <Column size={3} narrow>\r\n                                        <Image.Container size={'square'}>\r\n                                            <Image src={\"./data/products/\"+product.sku+\"_1\"+\".jpg\"}/>\r\n                                        </Image.Container>\r\n                                    </Column>\r\n                                    <Column size={7}>\r\n                                        <Title></Title>\r\n                                        <Title size={5}>{product.title}</Title>\r\n                                        <Title subtitle size={5}>{product.description}</Title>\r\n                                        <Title className=\"quantity\" size={5}>Quantity: {product.quantity}</Title>\r\n                                    </Column>\r\n                                    <Column size={2}>\r\n                                        <i className=\"material-icons\" onClick= {() => {RemoveProduct(product)}}>close</i>\r\n                                        <Title size={5}>${product.price}</Title>\r\n                                        <i className=\"material-icons\" onClick= {() => {IncreaseQuantitiy(product)}}>add_circle</i>\r\n                                        <i className=\"material-icons\" onClick= {() => {DecreaseQuantitiy(product)}}>remove_circle</i>\r\n                                    </Column>\r\n                                </Column.Group>                                                \r\n                            </List.Item>\r\n                           )       \r\n                })}\r\n            </List>\r\n            </Modal.Card.Body>\r\n            <Modal.Card.Foot>\r\n                    <Column size={6}>\r\n                        <Title size={4}>SUBTOTAL</Title>\r\n                    </Column>\r\n                    <Column size={6}>\r\n                        <Title size={4}>${CalTotal()}</Title>\r\n                    </Column>                     \r\n            </Modal.Card.Foot>\r\n            <Button fullwidth color=\"black\" size=\"large\">Checkout</Button>\r\n        </Modal.Card>\r\n        </Modal>);\r\n};\r\n\r\nexport default ShoppingCart;","import React, { useState } from 'react';\r\nimport { Column, Notification, Image, Button, Title } from \"rbx\";\r\nimport \"../css/App.css\";\r\n\r\nconst Product = ({key, product, inventory, setCartOpen, addProduct}) => {\r\n    const [sizeError, setSizeError] = useState();\r\n    const [selectedSize, setSelectedSize] = useState();\r\n\r\n    return (\r\n        <Column key={key} size=\"one-quarter\">\r\n            <Notification color=\"white\" textAlign=\"centered\">\r\n                <Image.Container size=\"128\">\r\n                <Image\r\n                    src={`/data/products/${product.sku}_1.jpg`}\r\n                />\r\n                </Image.Container>\r\n                {product.title}\r\n                <Title size={4}>${product.price}</Title>\r\n                <Button.Group \r\n                align=\"centered\" \r\n                badge={sizeError}\r\n                badgeColor=\"danger\">\r\n                {Object.keys(inventory).length > 0 ? ( \r\n                    Object.keys(inventory[product.sku]).filter(s => inventory[product.sku][s] > 0).map(s =>\r\n                    <Button\r\n                    className=\"sizeBtn\"\r\n                    onClick={() => { setSizeError(null); selectedSize === s ? setSelectedSize(null) : setSelectedSize(s);}}\r\n                    color = {selectedSize && selectedSize === s ? \"black\" : \"\"}>\r\n                        {s}\r\n                    </Button>)\r\n                    ) :\r\n                    null\r\n                }\r\n                <Button fullwidth color=\"black\" size=\"large\" onClick={() => {\r\n                    if(selectedSize) {\r\n                    setCartOpen(true); \r\n                    addProduct(product);\r\n                    }\r\n                    else {\r\n                    setSizeError(\"Select size\");\r\n                    }\r\n                }}>\r\n                    Add to cart\r\n                </Button>\r\n                </Button.Group>\r\n            </Notification>\r\n        </Column>\r\n    );\r\n};\r\n\r\nexport default Product;","import firebase from \"firebase/app\";\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\n\r\nconst uiConfig = {\r\n    signInFlow: 'popup',\r\n    signInOptions: [\r\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID\r\n    ],\r\n    callbacks: {\r\n        signInSuccessWithAuthResult: () => false\r\n    }\r\n};\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCK8vbymPcLDewFfHznSt8lEdgGZp4O4rk\",\r\n    authDomain: \"shopping-cart-2069e.firebaseapp.com\",\r\n    databaseURL: \"https://shopping-cart-2069e.firebaseio.com\",\r\n    projectId: \"shopping-cart-2069e\",\r\n    storageBucket: \"shopping-cart-2069e.appspot.com\",\r\n    messagingSenderId: \"17139108491\",\r\n    appId: \"1:17139108491:web:b7a7a301853ae0e95f228e\",\r\n    measurementId: \"G-NF59H641RN\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nconst db = firebase.database().ref();\r\n\r\nexport {db, uiConfig, firebase};","import React, { useEffect, useState } from 'react';\nimport \"rbx/index.css\";\nimport \"./css/App.css\";\nimport \"./css/ShoppingCart.css\";\nimport { Column, Button, Title, Message } from \"rbx\";\nimport ShoppingCart from \"./components/ShoppingCart\";\nimport Product from \"./components/Product\";\nimport {db, uiConfig, firebase} from './components/Firebase';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nconst App = () => {\n  const [data, setData] = useState({});\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartProducts, setCartProducts] = useState([]);\n  const [inventory, setInventory] = useState({});\n  const [sizes, setSizes] = useState([]);\n  const [user, setUser] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const products = Object.values(data);\n  const sizeFilter = () => {\n    var arr = [];\n    var keys = Object.keys(inventory);\n    sizes.length > 0 ? sizes.forEach(s => {keys.forEach(key => {if(inventory[key][s] > 0 && !arr.find(i => i.sku == key)) arr.push(products.find(p => p.sku == key))})}) : arr = [...products, ];\n    return arr;\n  }\n  const shownProducts = sizeFilter();\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const response = await fetch('./data/products.json');\n      const json = await response.json();\n      setData(json);\n    };\n    fetchProducts();\n  }, []);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(setUser);\n  }, []);\n \n  useEffect(() => {\n    setLoading(true);\n    const handleData = snap => {\n      if (snap.val()) setInventory(snap.val());\n    }\n    db.on('value', handleData, error => alert(error));\n    return () => { db.off('value', handleData); };\n  }, []);\n\n  const addProduct = (product) => {\n    let products = [...cartProducts];\n    let newProd;\n    const index = products.findIndex(i => i.sku === product.sku);\n    //console.log(\"index\", index);\n    if(index>-1){\n      newProd = {...products[index], quantity: products[index].quantity + 1};\n      products.splice(index, 1, newProd);\n    }\n    else{\n      newProd = {...product, quantity: 1};\n      products.push(newProd);\n    }\n    //console.log(\"After adding new prod\", products);\n    setCartProducts(products);\n  }\n  const sizeSelection = size => {\n    var arr = [...sizes];\n    const index = arr.indexOf(size);\n    if(index > -1){\n      arr.splice(index, 1);\n    }\n    else{\n      arr.push(size);\n    }\n    setSizes(arr);\n  }\n  const Banner = ({ user }) => (\n    <React.Fragment>\n      { user ? <Welcome user={ user } /> : <SignIn /> }\n    </React.Fragment>\n  );\n  const Welcome = ({ user }) => (\n    <Message color=\"info\">\n      <Message.Header>\n        Welcome, {user.displayName}\n        <Button primary onClick={() => firebase.auth().signOut()}>\n          Log out\n        </Button>\n      </Message.Header>\n    </Message>\n  );\n  const SignIn = () => (\n    <StyledFirebaseAuth\n      uiConfig={uiConfig}\n      firebaseAuth={firebase.auth()}\n    />\n  );\n\n  return (\n    <div id=\"app\">\n      <Column.Group>\n        <Column textAlign=\"centered\" size={2}>\n          <Title >Filter Sizes</Title>\n        </Column>\n        <Column size={2}>\n          <Button.Group textAlign=\"left\" narrow>\n            <Button rounded onClick={() => sizeSelection('S')} color={sizes.includes('S') ? \"black\" : \"\" } className = \"sizeBtn\">S</Button>\n            <Button rounded onClick={() => sizeSelection('M')} color={sizes.includes('M') ? \"black\" : \"\"} className = \"sizeBtn\">M</Button>\n            <Button rounded onClick={() => sizeSelection('L')} color={sizes.includes('L') ? \"black\" : \"\"} className = \"sizeBtn\">L</Button>\n            <Button rounded onClick={() => sizeSelection('XL')} color={sizes.includes('XL') ? \"black\" : \"\"} className = \"sizeBtn\">XL</Button>\n          </Button.Group>\n        </Column>\n        <Column paddingless marginless>\n          <Banner user={ user }/>\n        </Column>\n        <Column textAlign=\"right\" size={2}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"45px\"\n            height=\"45px\" \n            viewBox=\"0 0 24 24\" \n            onClick={() => { setCartOpen(!cartOpen)}}\n            className=\"svgIcon\"\n          >\n            <path fill=\"currentColor\" d=\"M17,18C15.89,18 15,18.89 15,20A2,2 0 0,0 17,22A2,2 0 0,0 19,20C19,18.89 18.1,18 17,18M1,2V4H3L6.6,11.59L5.24,14.04C5.09,14.32 5,14.65 5,15A2,2 0 0,0 7,17H19V15H7.42A0.25,0.25 0 0,1 7.17,14.75C7.17,14.7 7.18,14.66 7.2,14.63L8.1,13H15.55C16.3,13 16.96,12.58 17.3,11.97L20.88,5.5C20.95,5.34 21,5.17 21,5A1,1 0 0,0 20,4H5.21L4.27,2M7,18C5.89,18 5,18.89 5,20A2,2 0 0,0 7,22A2,2 0 0,0 9,20C9,18.89 8.1,18 7,18Z\" />\n          </svg>\n          {/* <Button  id=\"shop-cart\" size =\"large\"><i className=\"material-icons\">shopping_cart</i></Button> */}\n        </Column>        \n      </Column.Group>     \n      <ShoppingCart shopCartState={{cartOpen, setCartOpen}} productState={{cartProducts, setCartProducts}}>Cart</ShoppingCart>\n      \n      <Column.Group multiline centered gapSize={5} className=\"cards\">\n        {shownProducts.map(product => ( \n          <Product\n            key={product.sku}\n            product={product} \n            inventory={inventory} \n            setCartOpen={setCartOpen} \n            addProduct={addProduct}\n          />\n        ))}\n      </Column.Group>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}